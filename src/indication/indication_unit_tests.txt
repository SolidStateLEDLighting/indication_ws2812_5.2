// These code snippets can be copied and pasted into system_gpio.cpp and triggered by SW1 for testing.

case 1: // Creating Indication
{
    if (ind == nullptr)
        ind = new Indication(1, 2, 3);

    if (ind != nullptr) // Make sure memory was allocated first
    {
        if (xSemaphoreTake(semIndEntry, portMAX_DELAY)) // Get a lock on the object after it initializes
        {
            taskHandleIndRun = ind->getRunTaskHandle();         //
            queHandleIndCmdRequest = ind->getCmdRequestQueue(); //
            xSemaphoreGive(semIndEntry);                        // Release lock

            // Send out commands/information to any object that needs the indication handles.

            ESP_LOGW(TAG, "indication created");
        }
    }
    else
        ESP_LOGW(TAG, "Memory not allocated for indication object");
    break;
}  

// 2) Destroying and Creating an Indication Object
//
case 0: // Destroying indication
{
    if (ind != nullptr) // Make sure we already have a indication object
    {
        if (semIndEntry != nullptr)
        {
            xSemaphoreTake(semIndEntry, portMAX_DELAY); // Wait here until we gain the lock.
            
            // Send out notifications to any object that uses indication -- and tell them indication is no longer available.
            // Create a short waiting period

            delete ind;                          // Locking the object will be done inside the destructor.
            ind = nullptr;                       // Destructor will not set pointer null.  We do that manually.
            ESP_LOGW(TAG, "indication deleted"); //

            taskHandleIndRun = nullptr;       // Reset the indication handle
            queHandleIndCmdRequest = nullptr; //

            // Note: The indication semaphore is already destroyed - so don't "Give" it or a run time error will occur
        }
        else
          ESP_LOGW(TAG, "semIndEntry is not valid");
    }
    else
        ESP_LOGW(TAG, "indication object is null");

    break;
}  
_________________________________________